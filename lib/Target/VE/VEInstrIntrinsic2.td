// Patterns for VE intrinsic

// For alomst of intrinsics, pattern is automatically generated by veintrin.py
// to VEInstrIntrinsic.td. But for some intrinsic, pattern is not automatically
// generated.

def : Pat<(v256f64 (VEvld i64:$sy, i64:$sz, VLS:$vl)), (VLDrr i64:$sy, i64:$sz, VLS:$vl)>;
def : Pat<(v256f64 (VEvld (i64 simm7:$I), i64:$sz, VLS:$vl)), (VLDir (i64 simm7:$I), i64:$sz, VLS:$vl)>;
def : Pat<(v256f64 (VEvldu i64:$sy, i64:$sz, VLS:$vl)), (VLDUrr i64:$sy, i64:$sz, VLS:$vl)>;
def : Pat<(v256f64 (VEvldu (i64 simm7:$I), i64:$sz, VLS:$vl)), (VLDUir (i64 simm7:$I), i64:$sz, VLS:$vl)>;
def : Pat<(v256f64 (VEvldlsx i64:$sy, i64:$sz, VLS:$vl)), (VLDLsxrr i64:$sy, i64:$sz, VLS:$vl)>;
def : Pat<(v256f64 (VEvldlsx (i64 simm7:$I), i64:$sz, VLS:$vl)), (VLDLsxir (i64 simm7:$I), i64:$sz, VLS:$vl)>;
def : Pat<(v256f64 (VEvldlzx i64:$sy, i64:$sz, VLS:$vl)), (VLDLzxrr i64:$sy, i64:$sz, VLS:$vl)>;
def : Pat<(v256f64 (VEvldlzx (i64 simm7:$I), i64:$sz, VLS:$vl)), (VLDLzxir (i64 simm7:$I), i64:$sz, VLS:$vl)>;
def : Pat<(v256f64 (VEvld2d i64:$sy, i64:$sz, VLS:$vl)), (VLD2Drr i64:$sy, i64:$sz, VLS:$vl)>;
def : Pat<(v256f64 (VEvld2d (i64 simm7:$I), i64:$sz, VLS:$vl)), (VLD2Dir (i64 simm7:$I), i64:$sz, VLS:$vl)>;
def : Pat<(v256f64 (VEvldu2d i64:$sy, i64:$sz, VLS:$vl)), (VLDU2Drr i64:$sy, i64:$sz, VLS:$vl)>;
def : Pat<(v256f64 (VEvldu2d (i64 simm7:$I), i64:$sz, VLS:$vl)), (VLDU2Dir (i64 simm7:$I), i64:$sz, VLS:$vl)>;
def : Pat<(v256f64 (VEvldl2dsx i64:$sy, i64:$sz, VLS:$vl)), (VLDL2Dsxrr i64:$sy, i64:$sz, VLS:$vl)>;
def : Pat<(v256f64 (VEvldl2dsx (i64 simm7:$I), i64:$sz, VLS:$vl)), (VLDL2Dsxir (i64 simm7:$I), i64:$sz, VLS:$vl)>;
def : Pat<(v256f64 (VEvldl2dzx i64:$sy, i64:$sz, VLS:$vl)), (VLDL2Dzxrr i64:$sy, i64:$sz, VLS:$vl)>;
def : Pat<(v256f64 (VEvldl2dzx (i64 simm7:$I), i64:$sz, VLS:$vl)), (VLDL2Dzxir (i64 simm7:$I), i64:$sz, VLS:$vl)>;
def : Pat<(VEvst v256f64:$vx, i64:$sy, i64:$sz, VLS:$vl), (VSTrr v256f64:$vx, i64:$sy, i64:$sz, VLS:$vl)>;
def : Pat<(VEvst v256f64:$vx, (i64 simm7:$I), i64:$sz, VLS:$vl), (VSTir v256f64:$vx, (i64 simm7:$I), i64:$sz, VLS:$vl)>;
def : Pat<(VEvstu v256f64:$vx, i64:$sy, i64:$sz, VLS:$vl), (VSTUrr v256f64:$vx, i64:$sy, i64:$sz, VLS:$vl)>;
def : Pat<(VEvstu v256f64:$vx, (i64 simm7:$I), i64:$sz, VLS:$vl), (VSTUir v256f64:$vx, (i64 simm7:$I), i64:$sz, VLS:$vl)>;
def : Pat<(VEvstl v256f64:$vx, i64:$sy, i64:$sz, VLS:$vl), (VSTLrr v256f64:$vx, i64:$sy, i64:$sz, VLS:$vl)>;
def : Pat<(VEvstl v256f64:$vx, (i64 simm7:$I), i64:$sz, VLS:$vl), (VSTLir v256f64:$vx, (i64 simm7:$I), i64:$sz, VLS:$vl)>;
def : Pat<(VEvst2d v256f64:$vx, i64:$sy, i64:$sz, VLS:$vl), (VST2Drr v256f64:$vx, i64:$sy, i64:$sz, VLS:$vl)>;
def : Pat<(VEvst2d v256f64:$vx, (i64 simm7:$I), i64:$sz, VLS:$vl), (VST2Dir v256f64:$vx, (i64 simm7:$I), i64:$sz, VLS:$vl)>;
def : Pat<(VEvstu2d v256f64:$vx, i64:$sy, i64:$sz, VLS:$vl), (VSTU2Drr v256f64:$vx, i64:$sy, i64:$sz, VLS:$vl)>;
def : Pat<(VEvstu2d v256f64:$vx, (i64 simm7:$I), i64:$sz, VLS:$vl), (VSTU2Dir v256f64:$vx, (i64 simm7:$I), i64:$sz, VLS:$vl)>;
def : Pat<(VEvstl2d v256f64:$vx, i64:$sy, i64:$sz, VLS:$vl), (VSTL2Drr v256f64:$vx, i64:$sy, i64:$sz, VLS:$vl)>;
def : Pat<(VEvstl2d v256f64:$vx, (i64 simm7:$I), i64:$sz, VLS:$vl), (VSTL2Dir v256f64:$vx, (i64 simm7:$I), i64:$sz, VLS:$vl)>;
def : Pat<(int_ve_pfchv i64:$sy, i64:$sz), (PFCHVr i64:$sy, i64:$sz)>;
def : Pat<(int_ve_pfchv (i64 simm7:$I), i64:$sz), (PFCHVi (i64 simm7:$I), i64:$sz)>;
def : Pat<(int_ve_lsv_vvss v256f64:$vx, i32:$sy, i64:$sz), (LSVr v256f64:$vx, i32:$sy, i64:$sz)>;
def : Pat<(int_ve_lvs_svs_u64 v256f64:$vx, i32:$sy), (LVSi64r v256f64:$vx, i32:$sy)>;
def : Pat<(int_ve_lvs_svs_f64 v256f64:$vx, i32:$sy), (LVSf64r v256f64:$vx, i32:$sy)>;
def : Pat<(int_ve_lvs_svs_f32 v256f64:$vx, i32:$sy), (LVSf32r v256f64:$vx, i32:$sy)>;
def : Pat<(VElvm v256i1:$vmd, i64:$sy, i64:$sz), (LVMr v256i1:$vmd, i64:$sy, i64:$sz)>;
def : Pat<(VElvm v256i1:$vmd, (i64 uimm6:$N), i64:$sz), (LVMi v256i1:$vmd, (i64 uimm6:$N), i64:$sz)>;
def : Pat<(VElvm v512i1:$vmd, (i64 uimm6:$N), i64:$sz), (LVMpi v512i1:$vmd, (i64 uimm6:$N), i64:$sz)>;
def : Pat<(VEsvm v256i1:$vmz, i64:$sy), (SVMr v256i1:$vmz, i64:$sy)>;
def : Pat<(VEsvm v256i1:$vmz, (i64 uimm6:$N)), (SVMi v256i1:$vmz, (i64 uimm6:$N))>;
def : Pat<(VEsvm v512i1:$vmz, (i64 uimm6:$N)), (SVMpi v512i1:$vmz, (i64 uimm6:$N))>;
def : Pat<(v256f64 (INT_VBRD f64:$sy, VLS:$vl)), (VBRDf64r f64:$sy, VLS:$vl)>;
def : Pat<(v256f64 (INT_VBRD_M f64:$sy, v256i1:$vm, v256f64:$vd, VLS:$vl)), (VBRDf64rm f64:$sy, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VBRD i64:$sy, VLS:$vl)), (VBRDr i64:$sy, $vl)>;
def : Pat<(v256f64 (INT_VBRD_M i64:$sy, v256i1:$vm, v256f64:$vd, VLS:$vl)), (VBRDrm i64:$sy, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VBRD (i64 simm7:$I), VLS:$vl)), (VBRDi (i64 simm7:$I), $vl)>;
def : Pat<(v256f64 (INT_VBRD_M (i64 simm7:$I), v256i1:$vm, v256f64:$vd, VLS:$vl)), (VBRDim (i64 simm7:$I), v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VBRDU f32:$sy, VLS:$vl)), (VBRDf32r f32:$sy, $vl)>;
def : Pat<(v256f64 (INT_VBRDU_M f32:$sy, v256i1:$vm, v256f64:$vd, VLS:$vl)), (VBRDf32rm f32:$sy, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VBRDL i32:$sy, VLS:$vl)), (VBRDi32r i32:$sy, $vl)>;
def : Pat<(v256f64 (INT_VBRDL_M i32:$sy, v256i1:$vm, v256f64:$vd, VLS:$vl)), (VBRDi32rm i32:$sy, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VBRDL (i32 simm7:$I), VLS:$vl)), (VBRDi32i (i32 simm7:$I), $vl)>;
def : Pat<(v256f64 (INT_VBRDL_M (i32 simm7:$I), v256i1:$vm, v256f64:$vd, VLS:$vl)), (VBRDi32im (i32 simm7:$I), v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_PVBRD i64:$sy, VLS:$vl)), (VBRDpr i64:$sy, $vl)>;
def : Pat<(v256f64 (INT_PVBRD_M i64:$sy, v512i1:$vm, v256f64:$vd, VLS:$vl)), (VBRDprm i64:$sy, v512i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMV i32:$sy, v256f64:$vz, VLS:$vl), (VMVr i32:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VMV (i32 uimm7:$N), v256f64:$vz, VLS:$vl), (VMVi (i32 uimm7:$N), v256f64:$vz, $vl)>;
def : Pat<(INT_VADDUL v256f64:$vy, v256f64:$vz, VLS:$vl), (VADDlv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VADDUL i64:$sy, v256f64:$vz, VLS:$vl), (VADDlr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VADDUL (i64 simm7:$I), v256f64:$vz, VLS:$vl), (VADDli (i64 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(INT_VADDUL_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VADDlvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VADDUL_M i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VADDlrm i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VADDUL_M (i64 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VADDlim (i64 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VADDUW v256f64:$vy, v256f64:$vz, VLS:$vl), (VADDwv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VADDUW i32:$sy, v256f64:$vz, VLS:$vl), (VADDwr i32:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VADDUW (i32 simm7:$I), v256f64:$vz, VLS:$vl), (VADDwi (i32 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(INT_VADDUW_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VADDwvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VADDUW_M i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VADDwrm i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VADDUW_M (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VADDwim (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_PVADDU v256f64:$vy, v256f64:$vz, VLS:$vl), (VADDpv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_PVADDU i64:$sy, v256f64:$vz, VLS:$vl), (VADDpr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_PVADDU_M v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd, VLS:$vl), (VADDpvm v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_PVADDU_M i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd, VLS:$vl), (VADDprm i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VADDSWSX v256f64:$vy, v256f64:$vz, VLS:$vl), (VADSwsxv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VADDSWSX i32:$sy, v256f64:$vz, VLS:$vl), (VADSwsxr i32:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VADDSWSX (i32 simm7:$I), v256f64:$vz, VLS:$vl), (VADSwsxi (i32 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(INT_VADDSWSX_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VADSwsxvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VADDSWSX_M i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VADSwsxrm i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VADDSWSX_M (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VADSwsxim (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VADDSWZX v256f64:$vy, v256f64:$vz, VLS:$vl), (VADSwzxv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VADDSWZX i32:$sy, v256f64:$vz, VLS:$vl), (VADSwzxr i32:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VADDSWZX (i32 simm7:$I), v256f64:$vz, VLS:$vl), (VADSwzxi (i32 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(INT_VADDSWZX_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VADSwzxvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VADDSWZX_M i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VADSwzxrm i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VADDSWZX_M (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VADSwzxim (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_PVADDS v256f64:$vy, v256f64:$vz, VLS:$vl), (VADSpv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_PVADDS i64:$sy, v256f64:$vz, VLS:$vl), (VADSpr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_PVADDS_M v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd, VLS:$vl), (VADSpvm v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_PVADDS_M i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd, VLS:$vl), (VADSprm i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VADDSL v256f64:$vy, v256f64:$vz, VLS:$vl), (VADXlv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VADDSL i64:$sy, v256f64:$vz, VLS:$vl), (VADXlr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VADDSL (i64 simm7:$I), v256f64:$vz, VLS:$vl), (VADXli (i64 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(INT_VADDSL_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VADXlvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VADDSL_M i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VADXlrm i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VADDSL_M (i64 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VADXlim (i64 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VSUBUL v256f64:$vy, v256f64:$vz, VLS:$vl), (VSUBlv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VSUBUL i64:$sy, v256f64:$vz, VLS:$vl), (VSUBlr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VSUBUL (i64 simm7:$I), v256f64:$vz, VLS:$vl), (VSUBli (i64 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(INT_VSUBUL_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VSUBlvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VSUBUL_M i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VSUBlrm i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VSUBUL_M (i64 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VSUBlim (i64 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VSUBUW v256f64:$vy, v256f64:$vz, VLS:$vl), (VSUBwv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VSUBUW i32:$sy, v256f64:$vz, VLS:$vl), (VSUBwr i32:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VSUBUW (i32 simm7:$I), v256f64:$vz, VLS:$vl), (VSUBwi (i32 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(INT_VSUBUW_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VSUBwvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VSUBUW_M i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VSUBwrm i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VSUBUW_M (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VSUBwim (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_PVSUBU v256f64:$vy, v256f64:$vz, VLS:$vl), (VSUBpv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_PVSUBU i64:$sy, v256f64:$vz, VLS:$vl), (VSUBpr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_PVSUBU_M v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd, VLS:$vl), (VSUBpvm v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_PVSUBU_M i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd, VLS:$vl), (VSUBprm i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VSUBSWSX v256f64:$vy, v256f64:$vz, VLS:$vl), (VSBSwsxv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VSUBSWSX i32:$sy, v256f64:$vz, VLS:$vl), (VSBSwsxr i32:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VSUBSWSX (i32 simm7:$I), v256f64:$vz, VLS:$vl), (VSBSwsxi (i32 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(INT_VSUBSWSX_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VSBSwsxvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VSUBSWSX_M i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VSBSwsxrm i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VSUBSWSX_M (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VSBSwsxim (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VSUBSWZX v256f64:$vy, v256f64:$vz, VLS:$vl), (VSBSwzxv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VSUBSWZX i32:$sy, v256f64:$vz, VLS:$vl), (VSBSwzxr i32:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VSUBSWZX (i32 simm7:$I), v256f64:$vz, VLS:$vl), (VSBSwzxi (i32 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(INT_VSUBSWZX_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VSBSwzxvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VSUBSWZX_M i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VSBSwzxrm i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VSUBSWZX_M (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VSBSwzxim (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_PVSUBS v256f64:$vy, v256f64:$vz, VLS:$vl), (VSBSpv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_PVSUBS i64:$sy, v256f64:$vz, VLS:$vl), (VSBSpr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_PVSUBS_M v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd, VLS:$vl), (VSBSpvm v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_PVSUBS_M i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd, VLS:$vl), (VSBSprm i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VSUBSL v256f64:$vy, v256f64:$vz, VLS:$vl), (VSBXlv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VSUBSL i64:$sy, v256f64:$vz, VLS:$vl), (VSBXlr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VSUBSL (i64 simm7:$I), v256f64:$vz, VLS:$vl), (VSBXli (i64 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(INT_VSUBSL_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VSBXlvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VSUBSL_M i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VSBXlrm i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VSUBSL_M (i64 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VSBXlim (i64 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMULUL v256f64:$vy, v256f64:$vz, VLS:$vl), (VMPYlv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VMULUL i64:$sy, v256f64:$vz, VLS:$vl), (VMPYlr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VMULUL (i64 simm7:$I), v256f64:$vz, VLS:$vl), (VMPYli (i64 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(INT_VMULUL_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VMPYlvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMULUL_M i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VMPYlrm i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMULUL_M (i64 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VMPYlim (i64 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMULUW v256f64:$vy, v256f64:$vz, VLS:$vl), (VMPYwv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VMULUW i32:$sy, v256f64:$vz, VLS:$vl), (VMPYwr i32:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VMULUW (i32 simm7:$I), v256f64:$vz, VLS:$vl), (VMPYwi (i32 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(INT_VMULUW_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VMPYwvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMULUW_M i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VMPYwrm i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMULUW_M (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VMPYwim (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMULSWSX v256f64:$vy, v256f64:$vz, VLS:$vl), (VMPSwsxv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VMULSWSX i32:$sy, v256f64:$vz, VLS:$vl), (VMPSwsxr i32:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VMULSWSX (i32 simm7:$I), v256f64:$vz, VLS:$vl), (VMPSwsxi (i32 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(INT_VMULSWSX_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VMPSwsxvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMULSWSX_M i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VMPSwsxrm i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMULSWSX_M (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VMPSwsxim (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMULSWZX v256f64:$vy, v256f64:$vz, VLS:$vl), (VMPSwzxv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VMULSWZX i32:$sy, v256f64:$vz, VLS:$vl), (VMPSwzxr i32:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VMULSWZX (i32 simm7:$I), v256f64:$vz, VLS:$vl), (VMPSwzxi (i32 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(INT_VMULSWZX_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VMPSwzxvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMULSWZX_M i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VMPSwzxrm i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMULSWZX_M (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VMPSwzxim (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMULSL v256f64:$vy, v256f64:$vz, VLS:$vl), (VMPXlv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VMULSL i64:$sy, v256f64:$vz, VLS:$vl), (VMPXlr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VMULSL (i64 simm7:$I), v256f64:$vz, VLS:$vl), (VMPXli (i64 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(INT_VMULSL_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VMPXlvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMULSL_M i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VMPXlrm i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMULSL_M (i64 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VMPXlim (i64 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMULSLW v256f64:$vy, v256f64:$vz, VLS:$vl), (VMPDv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VMULSLW i32:$sy, v256f64:$vz, VLS:$vl), (VMPDr i32:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VMULSLW (i32 simm7:$I), v256f64:$vz, VLS:$vl), (VMPDi (i32 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(v256f64 (INT_VDIVUL v256f64:$vy, v256f64:$vz, VLS:$vl)), (VDIVlv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(v256f64 (INT_VDIVUL i64:$sy, v256f64:$vz, VLS:$vl)), (VDIVlr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(v256f64 (INT_VDIVUL (i64 simm7:$I), v256f64:$vz, VLS:$vl)), (VDIVli (i64 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(v256f64 (INT_VDIVUL_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl)), (VDIVlvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VDIVUL_M i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl)), (VDIVlrm i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VDIVUL_M (i64 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl)), (VDIVlim (i64 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VDIVUW v256f64:$vy, v256f64:$vz, VLS:$vl)), (VDIVwv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(v256f64 (INT_VDIVUW i32:$sy, v256f64:$vz, VLS:$vl)), (VDIVwr i32:$sy, v256f64:$vz, $vl)>;
def : Pat<(v256f64 (INT_VDIVUW (i32 simm7:$I), v256f64:$vz, VLS:$vl)), (VDIVwi (i32 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(v256f64 (INT_VDIVUW_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl)), (VDIVwvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VDIVUW_M i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl)), (VDIVwrm i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VDIVUW_M (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl)), (VDIVwim (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VDIVUL v256f64:$vy, i64:$sy, VLS:$vl)), (VDIVlr2 v256f64:$vy, i64:$sy, $vl)>;
def : Pat<(v256f64 (INT_VDIVUL v256f64:$vy, (i64 simm7:$I), VLS:$vl)), (VDIVli2 v256f64:$vy, (i64 simm7:$I), $vl)>;
def : Pat<(v256f64 (INT_VDIVUL_M v256f64:$vy, i64:$sy, v256i1:$vm, v256f64:$vd, VLS:$vl)), (VDIVlrm2 v256f64:$vy, i64:$sy, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VDIVUL_M v256f64:$vy, (i64 simm7:$I), v256i1:$vm, v256f64:$vd, VLS:$vl)), (VDIVlim2 v256f64:$vy, (i64 simm7:$I), v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VDIVUW v256f64:$vy, i32:$sy, VLS:$vl)), (VDIVwr2 v256f64:$vy, i32:$sy, $vl)>;
def : Pat<(v256f64 (INT_VDIVUW v256f64:$vy, (i32 simm7:$I), VLS:$vl)), (VDIVwi2 v256f64:$vy, (i32 simm7:$I), $vl)>;
def : Pat<(v256f64 (INT_VDIVUW_M v256f64:$vy, i32:$sy, v256i1:$vm, v256f64:$vd, VLS:$vl)), (VDIVwrm2 v256f64:$vy, i32:$sy, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VDIVUW_M v256f64:$vy, (i32 simm7:$I), v256i1:$vm, v256f64:$vd, VLS:$vl)), (VDIVwim2 v256f64:$vy, (i32 simm7:$I), v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VDIVSWSX v256f64:$vy, v256f64:$vz, VLS:$vl)), (VDVSwsxv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(v256f64 (INT_VDIVSWSX i32:$sy, v256f64:$vz, VLS:$vl)), (VDVSwsxr i32:$sy, v256f64:$vz, $vl)>;
def : Pat<(v256f64 (INT_VDIVSWSX (i32 simm7:$I), v256f64:$vz, VLS:$vl)), (VDVSwsxi (i32 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(v256f64 (INT_VDIVSWSX_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl)), (VDVSwsxvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VDIVSWSX_M i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl)), (VDVSwsxrm i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VDIVSWSX_M (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl)), (VDVSwsxim (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VDIVSWZX v256f64:$vy, v256f64:$vz, VLS:$vl)), (VDVSwzxv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(v256f64 (INT_VDIVSWZX i32:$sy, v256f64:$vz, VLS:$vl)), (VDVSwzxr i32:$sy, v256f64:$vz, $vl)>;
def : Pat<(v256f64 (INT_VDIVSWZX (i32 simm7:$I), v256f64:$vz, VLS:$vl)), (VDVSwzxi (i32 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(v256f64 (INT_VDIVSWZX_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl)), (VDVSwzxvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VDIVSWZX_M i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl)), (VDVSwzxrm i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VDIVSWZX_M (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl)), (VDVSwzxim (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VDIVSWSX v256f64:$vy, i32:$sy, VLS:$vl)), (VDVSwsxr2 v256f64:$vy, i32:$sy, $vl)>;
def : Pat<(v256f64 (INT_VDIVSWSX v256f64:$vy, (i32 simm7:$I), VLS:$vl)), (VDVSwsxi2 v256f64:$vy, (i32 simm7:$I), $vl)>;
def : Pat<(v256f64 (INT_VDIVSWSX_M v256f64:$vy, i32:$sy, v256i1:$vm, v256f64:$vd, VLS:$vl)), (VDVSwsxrm2 v256f64:$vy, i32:$sy, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VDIVSWSX_M v256f64:$vy, (i32 simm7:$I), v256i1:$vm, v256f64:$vd, VLS:$vl)), (VDVSwsxim2 v256f64:$vy, (i32 simm7:$I), v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VDIVSWZX v256f64:$vy, i32:$sy, VLS:$vl)), (VDVSwzxr2 v256f64:$vy, i32:$sy, $vl)>;
def : Pat<(v256f64 (INT_VDIVSWZX v256f64:$vy, (i32 simm7:$I), VLS:$vl)), (VDVSwzxi2 v256f64:$vy, (i32 simm7:$I), $vl)>;
def : Pat<(v256f64 (INT_VDIVSWZX_M v256f64:$vy, i32:$sy, v256i1:$vm, v256f64:$vd, VLS:$vl)), (VDVSwzxrm2 v256f64:$vy, i32:$sy, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VDIVSWZX_M v256f64:$vy, (i32 simm7:$I), v256i1:$vm, v256f64:$vd, VLS:$vl)), (VDVSwzxim2 v256f64:$vy, (i32 simm7:$I), v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VDIVSL v256f64:$vy, v256f64:$vz, VLS:$vl)), (VDVXlv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(v256f64 (INT_VDIVSL i64:$sy, v256f64:$vz, VLS:$vl)), (VDVXlr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(v256f64 (INT_VDIVSL (i64 simm7:$I), v256f64:$vz, VLS:$vl)), (VDVXli (i64 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(v256f64 (INT_VDIVSL_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl)), (VDVXlvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VDIVSL_M i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl)), (VDVXlrm i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VDIVSL_M (i64 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl)), (VDVXlim (i64 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VDIVSL v256f64:$vy, i64:$sy, VLS:$vl)), (VDVXlr2 v256f64:$vy, i64:$sy, $vl)>;
def : Pat<(v256f64 (INT_VDIVSL v256f64:$vy, (i64 simm7:$I), VLS:$vl)), (VDVXli2 v256f64:$vy, (i64 simm7:$I), $vl)>;
def : Pat<(v256f64 (INT_VDIVSL_M v256f64:$vy, i64:$sy, v256i1:$vm, v256f64:$vd, VLS:$vl)), (VDVXlrm2 v256f64:$vy, i64:$sy, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(v256f64 (INT_VDIVSL_M v256f64:$vy, (i64 simm7:$I), v256i1:$vm, v256f64:$vd, VLS:$vl)), (VDVXlim2 v256f64:$vy, (i64 simm7:$I), v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VCMPUL v256f64:$vy, v256f64:$vz, VLS:$vl), (VCMPlv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VCMPUL i64:$sy, v256f64:$vz, VLS:$vl), (VCMPlr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VCMPUL (i64 simm7:$I), v256f64:$vz, VLS:$vl), (VCMPli (i64 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(INT_VCMPUL_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCMPlvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VCMPUL_M i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCMPlrm i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VCMPUL_M (i64 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCMPlim (i64 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VCMPUW v256f64:$vy, v256f64:$vz, VLS:$vl), (VCMPwv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VCMPUW i32:$sy, v256f64:$vz, VLS:$vl), (VCMPwr i32:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VCMPUW (i32 simm7:$I), v256f64:$vz, VLS:$vl), (VCMPwi (i32 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(INT_VCMPUW_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCMPwvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VCMPUW_M i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCMPwrm i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VCMPUW_M (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCMPwim (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_PVCMPU v256f64:$vy, v256f64:$vz, VLS:$vl), (VCMPpv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_PVCMPU i64:$sy, v256f64:$vz, VLS:$vl), (VCMPpr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_PVCMPU_M v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd, VLS:$vl), (VCMPpvm v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_PVCMPU_M i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd, VLS:$vl), (VCMPprm i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VCMPSWSX v256f64:$vy, v256f64:$vz, VLS:$vl), (VCPSwsxv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VCMPSWSX i32:$sy, v256f64:$vz, VLS:$vl), (VCPSwsxr i32:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VCMPSWSX (i32 simm7:$I), v256f64:$vz, VLS:$vl), (VCPSwsxi (i32 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(INT_VCMPSWSX_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCPSwsxvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VCMPSWSX_M i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCPSwsxrm i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VCMPSWSX_M (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCPSwsxim (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VCMPSWZX v256f64:$vy, v256f64:$vz, VLS:$vl), (VCPSwzxv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VCMPSWZX i32:$sy, v256f64:$vz, VLS:$vl), (VCPSwzxr i32:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VCMPSWZX (i32 simm7:$I), v256f64:$vz, VLS:$vl), (VCPSwzxi (i32 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(INT_VCMPSWZX_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCPSwzxvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VCMPSWZX_M i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCPSwzxrm i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VCMPSWZX_M (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCPSwzxim (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_PVCMPS v256f64:$vy, v256f64:$vz, VLS:$vl), (VCPSpv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_PVCMPS i64:$sy, v256f64:$vz, VLS:$vl), (VCPSpr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_PVCMPS_M v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd, VLS:$vl), (VCPSpvm v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_PVCMPS_M i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd, VLS:$vl), (VCPSprm i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VCMPSL v256f64:$vy, v256f64:$vz, VLS:$vl), (VCPXlv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VCMPSL i64:$sy, v256f64:$vz, VLS:$vl), (VCPXlr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VCMPSL (i64 simm7:$I), v256f64:$vz, VLS:$vl), (VCPXli (i64 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(INT_VCMPSL_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCPXlvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VCMPSL_M i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCPXlrm i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VCMPSL_M (i64 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCPXlim (i64 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMAXSWSX v256f64:$vy, v256f64:$vz, VLS:$vl), (VCMSawsxv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VMAXSWSX i32:$sy, v256f64:$vz, VLS:$vl), (VCMSawsxr i32:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VMAXSWSX (i32 simm7:$I), v256f64:$vz, VLS:$vl), (VCMSawsxi (i32 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(INT_VMAXSWSX_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCMSawsxvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMAXSWSX_M i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCMSawsxrm i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMAXSWSX_M (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCMSawsxim (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMAXSWZX v256f64:$vy, v256f64:$vz, VLS:$vl), (VCMSawzxv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VMAXSWZX i32:$sy, v256f64:$vz, VLS:$vl), (VCMSawzxr i32:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VMAXSWZX (i32 simm7:$I), v256f64:$vz, VLS:$vl), (VCMSawzxi (i32 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(INT_VMAXSWZX_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCMSawzxvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMAXSWZX_M i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCMSawzxrm i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMAXSWZX_M (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCMSawzxim (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_PVMAXS v256f64:$vy, v256f64:$vz, VLS:$vl), (VCMSapv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_PVMAXS i64:$sy, v256f64:$vz, VLS:$vl), (VCMSapr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_PVMAXS_M v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd, VLS:$vl), (VCMSapvm v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_PVMAXS_M i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd, VLS:$vl), (VCMSaprm i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMAXSL v256f64:$vy, v256f64:$vz, VLS:$vl), (VCMXalv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VMAXSL i64:$sy, v256f64:$vz, VLS:$vl), (VCMXalr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VMAXSL (i64 simm7:$I), v256f64:$vz, VLS:$vl), (VCMXali (i64 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(INT_VMAXSL_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCMXalvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMAXSL_M i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCMXalrm i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMAXSL_M (i64 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCMXalim (i64 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMINSWSX v256f64:$vy, v256f64:$vz, VLS:$vl), (VCMSiwsxv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VMINSWSX i32:$sy, v256f64:$vz, VLS:$vl), (VCMSiwsxr i32:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VMINSWSX (i32 simm7:$I), v256f64:$vz, VLS:$vl), (VCMSiwsxi (i32 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(INT_VMINSWSX_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCMSiwsxvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMINSWSX_M i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCMSiwsxrm i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMINSWSX_M (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCMSiwsxim (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMINSWZX v256f64:$vy, v256f64:$vz, VLS:$vl), (VCMSiwzxv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VMINSWZX i32:$sy, v256f64:$vz, VLS:$vl), (VCMSiwzxr i32:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VMINSWZX (i32 simm7:$I), v256f64:$vz, VLS:$vl), (VCMSiwzxi (i32 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(INT_VMINSWZX_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCMSiwzxvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMINSWZX_M i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCMSiwzxrm i32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMINSWZX_M (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCMSiwzxim (i32 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_PVMINS v256f64:$vy, v256f64:$vz, VLS:$vl), (VCMSipv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_PVMINS i64:$sy, v256f64:$vz, VLS:$vl), (VCMSipr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_PVMINS_M v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd, VLS:$vl), (VCMSipvm v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_PVMINS_M i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd, VLS:$vl), (VCMSiprm i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMINSL v256f64:$vy, v256f64:$vz, VLS:$vl), (VCMXilv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VMINSL i64:$sy, v256f64:$vz, VLS:$vl), (VCMXilr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VMINSL (i64 simm7:$I), v256f64:$vz, VLS:$vl), (VCMXili (i64 simm7:$I), v256f64:$vz, $vl)>;
def : Pat<(INT_VMINSL_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCMXilvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMINSL_M i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCMXilrm i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VMINSL_M (i64 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VCMXilim (i64 simm7:$I), v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VAND v256f64:$vy, v256f64:$vz, VLS:$vl), (VANDv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VAND i64:$sy, v256f64:$vz, VLS:$vl), (VANDr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VAND_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VANDvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VAND_M i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VANDrm i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_PVAND v256f64:$vy, v256f64:$vz, VLS:$vl), (VANDpv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_PVAND i64:$sy, v256f64:$vz, VLS:$vl), (VANDpr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_PVAND_M v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd, VLS:$vl), (VANDpvm v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_PVAND_M i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd, VLS:$vl), (VANDprm i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VOR v256f64:$vy, v256f64:$vz, VLS:$vl), (VORv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VOR i64:$sy, v256f64:$vz, VLS:$vl), (VORr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VOR_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VORvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VOR_M i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VORrm i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_PVOR v256f64:$vy, v256f64:$vz, VLS:$vl), (VORpv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_PVOR i64:$sy, v256f64:$vz, VLS:$vl), (VORpr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_PVOR_M v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd, VLS:$vl), (VORpvm v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_PVOR_M i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd, VLS:$vl), (VORprm i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VXOR v256f64:$vy, v256f64:$vz, VLS:$vl), (VXORv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VXOR i64:$sy, v256f64:$vz, VLS:$vl), (VXORr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VXOR_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VXORvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VXOR_M i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VXORrm i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_PVXOR v256f64:$vy, v256f64:$vz, VLS:$vl), (VXORpv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_PVXOR i64:$sy, v256f64:$vz, VLS:$vl), (VXORpr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_PVXOR_M v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd, VLS:$vl), (VXORpvm v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_PVXOR_M i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd, VLS:$vl), (VXORprm i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VEQV v256f64:$vy, v256f64:$vz, VLS:$vl), (VEQVv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_VEQV i64:$sy, v256f64:$vz, VLS:$vl), (VEQVr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_VEQV_M v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VEQVvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_VEQV_M i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, VLS:$vl), (VEQVrm i64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_PVEQV v256f64:$vy, v256f64:$vz, VLS:$vl), (VEQVpv v256f64:$vy, v256f64:$vz, $vl)>;
def : Pat<(INT_PVEQV i64:$sy, v256f64:$vz, VLS:$vl), (VEQVpr i64:$sy, v256f64:$vz, $vl)>;
def : Pat<(INT_PVEQV_M v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd, VLS:$vl), (VEQVpvm v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(INT_PVEQV_M i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd, VLS:$vl), (VEQVprm i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd, $vl)>;
def : Pat<(int_ve_vseq_v ), (VSEQv )>;
def : Pat<(int_ve_pvseqlo_v ), (VSEQlv )>;
def : Pat<(int_ve_pvsequp_v ), (VSEQuv )>;
def : Pat<(int_ve_pvseq_v ), (VSEQpv )>;
def : Pat<(int_ve_vsll_vvv v256f64:$vz, v256f64:$vy), (VSLLv v256f64:$vz, v256f64:$vy)>;
def : Pat<(int_ve_vsll_vvs v256f64:$vz, i64:$sy), (VSLLr2 v256f64:$vz, i64:$sy)>;
def : Pat<(int_ve_vsll_vvs v256f64:$vz, (i64 uimm6:$N)), (VSLLi2 v256f64:$vz, (i64 uimm6:$N))>;
def : Pat<(VEvsll v256f64:$vz, v256f64:$vy, v256i1:$vm, v256f64:$vd), (VSLLvm v256f64:$vz, v256f64:$vy, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvsll v256f64:$vz, i64:$sy, v256i1:$vm, v256f64:$vd), (VSLLrm2 v256f64:$vz, i64:$sy, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvsll v256f64:$vz, (i64 uimm6:$N), v256i1:$vm, v256f64:$vd), (VSLLim2 v256f64:$vz, (i64 uimm6:$N), v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_pvsll_vvv v256f64:$vz, v256f64:$vy), (VSLLpv v256f64:$vz, v256f64:$vy)>;
def : Pat<(int_ve_pvsll_vvs v256f64:$vz, i64:$sy), (VSLLpr2 v256f64:$vz, i64:$sy)>;
def : Pat<(VEpvsll v256f64:$vz, v256f64:$vy, v512i1:$vm, v256f64:$vd), (VSLLpvm v256f64:$vz, v256f64:$vy, v512i1:$vm, v256f64:$vd)>;
def : Pat<(VEpvsll v256f64:$vz, i64:$sy, v512i1:$vm, v256f64:$vd), (VSLLprm2 v256f64:$vz, i64:$sy, v512i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vsrl_vvv v256f64:$vz, v256f64:$vy), (VSRLv v256f64:$vz, v256f64:$vy)>;
def : Pat<(int_ve_vsrl_vvs v256f64:$vz, i64:$sy), (VSRLr2 v256f64:$vz, i64:$sy)>;
def : Pat<(int_ve_vsrl_vvs v256f64:$vz, (i64 uimm6:$N)), (VSRLi2 v256f64:$vz, (i64 uimm6:$N))>;
def : Pat<(VEvsrl v256f64:$vz, v256f64:$vy, v256i1:$vm, v256f64:$vd), (VSRLvm v256f64:$vz, v256f64:$vy, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvsrl v256f64:$vz, i64:$sy, v256i1:$vm, v256f64:$vd), (VSRLrm2 v256f64:$vz, i64:$sy, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvsrl v256f64:$vz, (i64 uimm6:$N), v256i1:$vm, v256f64:$vd), (VSRLim2 v256f64:$vz, (i64 uimm6:$N), v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_pvsrl_vvv v256f64:$vz, v256f64:$vy), (VSRLpv v256f64:$vz, v256f64:$vy)>;
def : Pat<(int_ve_pvsrl_vvs v256f64:$vz, i64:$sy), (VSRLpr2 v256f64:$vz, i64:$sy)>;
def : Pat<(VEpvsrl v256f64:$vz, v256f64:$vy, v512i1:$vm, v256f64:$vd), (VSRLpvm v256f64:$vz, v256f64:$vy, v512i1:$vm, v256f64:$vd)>;
def : Pat<(VEpvsrl v256f64:$vz, i64:$sy, v512i1:$vm, v256f64:$vd), (VSRLprm2 v256f64:$vz, i64:$sy, v512i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vslaw_vvv v256f64:$vz, v256f64:$vy), (VSLAv v256f64:$vz, v256f64:$vy)>;
def : Pat<(int_ve_vslaw_vvs v256f64:$vz, i64:$sy), (VSLAr2 v256f64:$vz, i64:$sy)>;
def : Pat<(int_ve_vslaw_vvs v256f64:$vz, (i64 uimm6:$N)), (VSLAi2 v256f64:$vz, (i64 uimm6:$N))>;
def : Pat<(VEvslaw v256f64:$vz, v256f64:$vy, v256i1:$vm, v256f64:$vd), (VSLAvm v256f64:$vz, v256f64:$vy, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvslaw v256f64:$vz, i64:$sy, v256i1:$vm, v256f64:$vd), (VSLArm2 v256f64:$vz, i64:$sy, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvslaw v256f64:$vz, (i64 uimm6:$N), v256i1:$vm, v256f64:$vd), (VSLAim2 v256f64:$vz, (i64 uimm6:$N), v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_pvsla_vvv v256f64:$vz, v256f64:$vy), (VSLApv v256f64:$vz, v256f64:$vy)>;
def : Pat<(int_ve_pvsla_vvs v256f64:$vz, i64:$sy), (VSLApr2 v256f64:$vz, i64:$sy)>;
def : Pat<(VEpvsla v256f64:$vz, v256f64:$vy, v512i1:$vm, v256f64:$vd), (VSLApvm v256f64:$vz, v256f64:$vy, v512i1:$vm, v256f64:$vd)>;
def : Pat<(VEpvsla v256f64:$vz, i64:$sy, v512i1:$vm, v256f64:$vd), (VSLAprm2 v256f64:$vz, i64:$sy, v512i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vslal_vvv v256f64:$vz, v256f64:$vy), (VSLAXv v256f64:$vz, v256f64:$vy)>;
def : Pat<(int_ve_vslal_vvs v256f64:$vz, i64:$sy), (VSLAXr2 v256f64:$vz, i64:$sy)>;
def : Pat<(int_ve_vslal_vvs v256f64:$vz, (i64 uimm6:$N)), (VSLAXi2 v256f64:$vz, (i64 uimm6:$N))>;
def : Pat<(VEvslal v256f64:$vz, v256f64:$vy, v256i1:$vm, v256f64:$vd), (VSLAXvm v256f64:$vz, v256f64:$vy, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvslal v256f64:$vz, i64:$sy, v256i1:$vm, v256f64:$vd), (VSLAXrm2 v256f64:$vz, i64:$sy, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvslal v256f64:$vz, (i64 uimm6:$N), v256i1:$vm, v256f64:$vd), (VSLAXim2 v256f64:$vz, (i64 uimm6:$N), v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vsraw_vvv v256f64:$vz, v256f64:$vy), (VSRAv v256f64:$vz, v256f64:$vy)>;
def : Pat<(int_ve_vsraw_vvs v256f64:$vz, i64:$sy), (VSRAr2 v256f64:$vz, i64:$sy)>;
def : Pat<(int_ve_vsraw_vvs v256f64:$vz, (i64 uimm6:$N)), (VSRAi2 v256f64:$vz, (i64 uimm6:$N))>;
def : Pat<(VEvsraw v256f64:$vz, v256f64:$vy, v256i1:$vm, v256f64:$vd), (VSRAvm v256f64:$vz, v256f64:$vy, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvsraw v256f64:$vz, i64:$sy, v256i1:$vm, v256f64:$vd), (VSRArm2 v256f64:$vz, i64:$sy, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvsraw v256f64:$vz, (i64 uimm6:$N), v256i1:$vm, v256f64:$vd), (VSRAim2 v256f64:$vz, (i64 uimm6:$N), v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_pvsra_vvv v256f64:$vz, v256f64:$vy), (VSRApv v256f64:$vz, v256f64:$vy)>;
def : Pat<(int_ve_pvsra_vvs v256f64:$vz, i64:$sy), (VSRApr2 v256f64:$vz, i64:$sy)>;
def : Pat<(VEpvsra v256f64:$vz, v256f64:$vy, v512i1:$vm, v256f64:$vd), (VSRApvm v256f64:$vz, v256f64:$vy, v512i1:$vm, v256f64:$vd)>;
def : Pat<(VEpvsra v256f64:$vz, i64:$sy, v512i1:$vm, v256f64:$vd), (VSRAprm2 v256f64:$vz, i64:$sy, v512i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vsral_vvv v256f64:$vz, v256f64:$vy), (VSRAXv v256f64:$vz, v256f64:$vy)>;
def : Pat<(int_ve_vsral_vvs v256f64:$vz, i64:$sy), (VSRAXr2 v256f64:$vz, i64:$sy)>;
def : Pat<(int_ve_vsral_vvs v256f64:$vz, (i64 uimm6:$N)), (VSRAXi2 v256f64:$vz, (i64 uimm6:$N))>;
def : Pat<(VEvsral v256f64:$vz, v256f64:$vy, v256i1:$vm, v256f64:$vd), (VSRAXvm v256f64:$vz, v256f64:$vy, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvsral v256f64:$vz, i64:$sy, v256i1:$vm, v256f64:$vd), (VSRAXrm2 v256f64:$vz, i64:$sy, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvsral v256f64:$vz, (i64 uimm6:$N), v256i1:$vm, v256f64:$vd), (VSRAXim2 v256f64:$vz, (i64 uimm6:$N), v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vsfa_vvss v256f64:$vz, i64:$sy, i64:$sz), (VSFAr v256f64:$vz, i64:$sy, i64:$sz)>;
def : Pat<(int_ve_vsfa_vvss v256f64:$vz, (i64 simm7:$I), i64:$sz), (VSFAi v256f64:$vz, (i64 simm7:$I), i64:$sz)>;
def : Pat<(VEvsfa v256f64:$vz, i64:$sy, i64:$sz, v256i1:$vm, v256f64:$vd), (VSFArm v256f64:$vz, i64:$sy, i64:$sz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvsfa v256f64:$vz, (i64 simm7:$I), i64:$sz, v256i1:$vm, v256f64:$vd), (VSFAim v256f64:$vz, (i64 simm7:$I), i64:$sz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vfaddd_vvv v256f64:$vy, v256f64:$vz), (VFADdv v256f64:$vy, v256f64:$vz)>;
def : Pat<(int_ve_vfaddd_vsv f64:$sy, v256f64:$vz), (VFADdr f64:$sy, v256f64:$vz)>;
def : Pat<(VEvfaddd v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFADdvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfaddd f64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFADdrm f64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vfadds_vvv v256f64:$vy, v256f64:$vz), (VFADsv v256f64:$vy, v256f64:$vz)>;
def : Pat<(int_ve_vfadds_vsv f32:$sy, v256f64:$vz), (VFADsr f32:$sy, v256f64:$vz)>;
def : Pat<(VEvfadds v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFADsvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfadds f32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFADsrm f32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_pvfadd_vvv v256f64:$vy, v256f64:$vz), (VFADpv v256f64:$vy, v256f64:$vz)>;
def : Pat<(int_ve_pvfadd_vsv i64:$sy, v256f64:$vz), (VFADpr i64:$sy, v256f64:$vz)>;
def : Pat<(VEpvfadd v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd), (VFADpvm v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd)>;
def : Pat<(VEpvfadd i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd), (VFADprm i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vfsubd_vvv v256f64:$vy, v256f64:$vz), (VFSBdv v256f64:$vy, v256f64:$vz)>;
def : Pat<(int_ve_vfsubd_vsv f64:$sy, v256f64:$vz), (VFSBdr f64:$sy, v256f64:$vz)>;
def : Pat<(VEvfsubd v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFSBdvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfsubd f64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFSBdrm f64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vfsubs_vvv v256f64:$vy, v256f64:$vz), (VFSBsv v256f64:$vy, v256f64:$vz)>;
def : Pat<(int_ve_vfsubs_vsv f32:$sy, v256f64:$vz), (VFSBsr f32:$sy, v256f64:$vz)>;
def : Pat<(VEvfsubs v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFSBsvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfsubs f32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFSBsrm f32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_pvfsub_vvv v256f64:$vy, v256f64:$vz), (VFSBpv v256f64:$vy, v256f64:$vz)>;
def : Pat<(int_ve_pvfsub_vsv i64:$sy, v256f64:$vz), (VFSBpr i64:$sy, v256f64:$vz)>;
def : Pat<(VEpvfsub v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd), (VFSBpvm v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd)>;
def : Pat<(VEpvfsub i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd), (VFSBprm i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vfmuld_vvv v256f64:$vy, v256f64:$vz), (VFMPdv v256f64:$vy, v256f64:$vz)>;
def : Pat<(int_ve_vfmuld_vsv f64:$sy, v256f64:$vz), (VFMPdr f64:$sy, v256f64:$vz)>;
def : Pat<(VEvfmuld v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFMPdvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfmuld f64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFMPdrm f64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vfmuls_vvv v256f64:$vy, v256f64:$vz), (VFMPsv v256f64:$vy, v256f64:$vz)>;
def : Pat<(int_ve_vfmuls_vsv f32:$sy, v256f64:$vz), (VFMPsr f32:$sy, v256f64:$vz)>;
def : Pat<(VEvfmuls v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFMPsvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfmuls f32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFMPsrm f32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_pvfmul_vvv v256f64:$vy, v256f64:$vz), (VFMPpv v256f64:$vy, v256f64:$vz)>;
def : Pat<(int_ve_pvfmul_vsv i64:$sy, v256f64:$vz), (VFMPpr i64:$sy, v256f64:$vz)>;
def : Pat<(VEpvfmul v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd), (VFMPpvm v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd)>;
def : Pat<(VEpvfmul i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd), (VFMPprm i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vfdivd_vvv v256f64:$vy, v256f64:$vz), (VFDVdv v256f64:$vy, v256f64:$vz)>;
def : Pat<(int_ve_vfdivd_vsv f64:$sy, v256f64:$vz), (VFDVdr f64:$sy, v256f64:$vz)>;
def : Pat<(VEvfdivd v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFDVdvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfdivd f64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFDVdrm f64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vfdivs_vvv v256f64:$vy, v256f64:$vz), (VFDVsv v256f64:$vy, v256f64:$vz)>;
def : Pat<(int_ve_vfdivs_vsv f32:$sy, v256f64:$vz), (VFDVsr f32:$sy, v256f64:$vz)>;
def : Pat<(VEvfdivs v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFDVsvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfdivs f32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFDVsrm f32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vfsqrtd_vv v256f64:$vy), (VFSQRTdv v256f64:$vy)>;
def : Pat<(int_ve_vfsqrts_vv v256f64:$vy), (VFSQRTsv v256f64:$vy)>;
def : Pat<(int_ve_vfcmpd_vvv v256f64:$vy, v256f64:$vz), (VFCPdv v256f64:$vy, v256f64:$vz)>;
def : Pat<(int_ve_vfcmpd_vsv f64:$sy, v256f64:$vz), (VFCPdr f64:$sy, v256f64:$vz)>;
def : Pat<(VEvfcmpd v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFCPdvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfcmpd f64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFCPdrm f64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vfcmps_vvv v256f64:$vy, v256f64:$vz), (VFCPsv v256f64:$vy, v256f64:$vz)>;
def : Pat<(int_ve_vfcmps_vsv f32:$sy, v256f64:$vz), (VFCPsr f32:$sy, v256f64:$vz)>;
def : Pat<(VEvfcmps v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFCPsvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfcmps f32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFCPsrm f32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_pvfcmp_vvv v256f64:$vy, v256f64:$vz), (VFCPpv v256f64:$vy, v256f64:$vz)>;
def : Pat<(int_ve_pvfcmp_vsv i64:$sy, v256f64:$vz), (VFCPpr i64:$sy, v256f64:$vz)>;
def : Pat<(VEpvfcmp v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd), (VFCPpvm v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd)>;
def : Pat<(VEpvfcmp i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd), (VFCPprm i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vfmaxd_vvv v256f64:$vy, v256f64:$vz), (VFCMadv v256f64:$vy, v256f64:$vz)>;
def : Pat<(int_ve_vfmaxd_vsv f64:$sy, v256f64:$vz), (VFCMadr f64:$sy, v256f64:$vz)>;
def : Pat<(VEvfmaxd v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFCMadvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfmaxd f64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFCMadrm f64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vfmaxs_vvv v256f64:$vy, v256f64:$vz), (VFCMasv v256f64:$vy, v256f64:$vz)>;
def : Pat<(int_ve_vfmaxs_vsv f32:$sy, v256f64:$vz), (VFCMasr f32:$sy, v256f64:$vz)>;
def : Pat<(VEvfmaxs v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFCMasvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfmaxs f32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFCMasrm f32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_pvfmax_vvv v256f64:$vy, v256f64:$vz), (VFCMapv v256f64:$vy, v256f64:$vz)>;
def : Pat<(int_ve_pvfmax_vsv i64:$sy, v256f64:$vz), (VFCMapr i64:$sy, v256f64:$vz)>;
def : Pat<(VEpvfmax v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd), (VFCMapvm v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd)>;
def : Pat<(VEpvfmax i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd), (VFCMaprm i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vfmind_vvv v256f64:$vy, v256f64:$vz), (VFCMidv v256f64:$vy, v256f64:$vz)>;
def : Pat<(int_ve_vfmind_vsv f64:$sy, v256f64:$vz), (VFCMidr f64:$sy, v256f64:$vz)>;
def : Pat<(VEvfmind v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFCMidvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfmind f64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFCMidrm f64:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vfmins_vvv v256f64:$vy, v256f64:$vz), (VFCMisv v256f64:$vy, v256f64:$vz)>;
def : Pat<(int_ve_vfmins_vsv f32:$sy, v256f64:$vz), (VFCMisr f32:$sy, v256f64:$vz)>;
def : Pat<(VEvfmins v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFCMisvm v256f64:$vy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfmins f32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd), (VFCMisrm f32:$sy, v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_pvfmin_vvv v256f64:$vy, v256f64:$vz), (VFCMipv v256f64:$vy, v256f64:$vz)>;
def : Pat<(int_ve_pvfmin_vsv i64:$sy, v256f64:$vz), (VFCMipr i64:$sy, v256f64:$vz)>;
def : Pat<(VEpvfmin v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd), (VFCMipvm v256f64:$vy, v256f64:$vz, v512i1:$vm, v256f64:$vd)>;
def : Pat<(VEpvfmin i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd), (VFCMiprm i64:$sy, v256f64:$vz, v512i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vfmadd_vvvv v256f64:$vy, v256f64:$vz, v256f64:$vw), (VFMADdv v256f64:$vy, v256f64:$vz, v256f64:$vw)>;
def : Pat<(int_ve_vfmadd_vsvv f64:$sy, v256f64:$vz, v256f64:$vw), (VFMADdr f64:$sy, v256f64:$vz, v256f64:$vw)>;
def : Pat<(int_ve_vfmadd_vvsv v256f64:$vy, f64:$sy, v256f64:$vw), (VFMADdr2 v256f64:$vy, f64:$sy, v256f64:$vw)>;
def : Pat<(VEvfmadd v256f64:$vy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd), (VFMADdvm v256f64:$vy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfmadd f64:$sy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd), (VFMADdrm f64:$sy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfmadd v256f64:$vy, f64:$sy, v256f64:$vw, v256i1:$vm, v256f64:$vd), (VFMADdr2m v256f64:$vy, f64:$sy, v256f64:$vw, v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vfmads_vvvv v256f64:$vy, v256f64:$vz, v256f64:$vw), (VFMADsv v256f64:$vy, v256f64:$vz, v256f64:$vw)>;
def : Pat<(int_ve_vfmads_vsvv f32:$sy, v256f64:$vz, v256f64:$vw), (VFMADsr f32:$sy, v256f64:$vz, v256f64:$vw)>;
def : Pat<(int_ve_vfmads_vvsv v256f64:$vy, f32:$sy, v256f64:$vw), (VFMADsr2 v256f64:$vy, f32:$sy, v256f64:$vw)>;
def : Pat<(VEvfmads v256f64:$vy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd), (VFMADsvm v256f64:$vy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfmads f32:$sy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd), (VFMADsrm f32:$sy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfmads v256f64:$vy, f32:$sy, v256f64:$vw, v256i1:$vm, v256f64:$vd), (VFMADsr2m v256f64:$vy, f32:$sy, v256f64:$vw, v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_pvfmad_vvvv v256f64:$vy, v256f64:$vz, v256f64:$vw), (VFMADpv v256f64:$vy, v256f64:$vz, v256f64:$vw)>;
def : Pat<(int_ve_pvfmad_vsvv i64:$sy, v256f64:$vz, v256f64:$vw), (VFMADpr i64:$sy, v256f64:$vz, v256f64:$vw)>;
def : Pat<(int_ve_pvfmad_vvsv v256f64:$vy, i64:$sy, v256f64:$vw), (VFMADpr2 v256f64:$vy, i64:$sy, v256f64:$vw)>;
def : Pat<(VEpvfmad v256f64:$vy, v256f64:$vz, v256f64:$vw, v512i1:$vm, v256f64:$vd), (VFMADpvm v256f64:$vy, v256f64:$vz, v256f64:$vw, v512i1:$vm, v256f64:$vd)>;
def : Pat<(VEpvfmad i64:$sy, v256f64:$vz, v256f64:$vw, v512i1:$vm, v256f64:$vd), (VFMADprm i64:$sy, v256f64:$vz, v256f64:$vw, v512i1:$vm, v256f64:$vd)>;
def : Pat<(VEpvfmad v256f64:$vy, i64:$sy, v256f64:$vw, v512i1:$vm, v256f64:$vd), (VFMADpr2m v256f64:$vy, i64:$sy, v256f64:$vw, v512i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vfmsbd_vvvv v256f64:$vy, v256f64:$vz, v256f64:$vw), (VFMSBdv v256f64:$vy, v256f64:$vz, v256f64:$vw)>;
def : Pat<(int_ve_vfmsbd_vsvv f64:$sy, v256f64:$vz, v256f64:$vw), (VFMSBdr f64:$sy, v256f64:$vz, v256f64:$vw)>;
def : Pat<(int_ve_vfmsbd_vvsv v256f64:$vy, f64:$sy, v256f64:$vw), (VFMSBdr2 v256f64:$vy, f64:$sy, v256f64:$vw)>;
def : Pat<(VEvfmsbd v256f64:$vy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd), (VFMSBdvm v256f64:$vy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfmsbd f64:$sy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd), (VFMSBdrm f64:$sy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfmsbd v256f64:$vy, f64:$sy, v256f64:$vw, v256i1:$vm, v256f64:$vd), (VFMSBdr2m v256f64:$vy, f64:$sy, v256f64:$vw, v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vfmsbs_vvvv v256f64:$vy, v256f64:$vz, v256f64:$vw), (VFMSBsv v256f64:$vy, v256f64:$vz, v256f64:$vw)>;
def : Pat<(int_ve_vfmsbs_vsvv f32:$sy, v256f64:$vz, v256f64:$vw), (VFMSBsr f32:$sy, v256f64:$vz, v256f64:$vw)>;
def : Pat<(int_ve_vfmsbs_vvsv v256f64:$vy, f32:$sy, v256f64:$vw), (VFMSBsr2 v256f64:$vy, f32:$sy, v256f64:$vw)>;
def : Pat<(VEvfmsbs v256f64:$vy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd), (VFMSBsvm v256f64:$vy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfmsbs f32:$sy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd), (VFMSBsrm f32:$sy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfmsbs v256f64:$vy, f32:$sy, v256f64:$vw, v256i1:$vm, v256f64:$vd), (VFMSBsr2m v256f64:$vy, f32:$sy, v256f64:$vw, v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_pvfmsb_vvvv v256f64:$vy, v256f64:$vz, v256f64:$vw), (VFMSBpv v256f64:$vy, v256f64:$vz, v256f64:$vw)>;
def : Pat<(int_ve_pvfmsb_vsvv i64:$sy, v256f64:$vz, v256f64:$vw), (VFMSBpr i64:$sy, v256f64:$vz, v256f64:$vw)>;
def : Pat<(int_ve_pvfmsb_vvsv v256f64:$vy, i64:$sy, v256f64:$vw), (VFMSBpr2 v256f64:$vy, i64:$sy, v256f64:$vw)>;
def : Pat<(VEpvfmsb v256f64:$vy, v256f64:$vz, v256f64:$vw, v512i1:$vm, v256f64:$vd), (VFMSBpvm v256f64:$vy, v256f64:$vz, v256f64:$vw, v512i1:$vm, v256f64:$vd)>;
def : Pat<(VEpvfmsb i64:$sy, v256f64:$vz, v256f64:$vw, v512i1:$vm, v256f64:$vd), (VFMSBprm i64:$sy, v256f64:$vz, v256f64:$vw, v512i1:$vm, v256f64:$vd)>;
def : Pat<(VEpvfmsb v256f64:$vy, i64:$sy, v256f64:$vw, v512i1:$vm, v256f64:$vd), (VFMSBpr2m v256f64:$vy, i64:$sy, v256f64:$vw, v512i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vfnmadd_vvvv v256f64:$vy, v256f64:$vz, v256f64:$vw), (VFNMADdv v256f64:$vy, v256f64:$vz, v256f64:$vw)>;
def : Pat<(int_ve_vfnmadd_vsvv f64:$sy, v256f64:$vz, v256f64:$vw), (VFNMADdr f64:$sy, v256f64:$vz, v256f64:$vw)>;
def : Pat<(int_ve_vfnmadd_vvsv v256f64:$vy, f64:$sy, v256f64:$vw), (VFNMADdr2 v256f64:$vy, f64:$sy, v256f64:$vw)>;
def : Pat<(VEvfnmadd v256f64:$vy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd), (VFNMADdvm v256f64:$vy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfnmadd f64:$sy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd), (VFNMADdrm f64:$sy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfnmadd v256f64:$vy, f64:$sy, v256f64:$vw, v256i1:$vm, v256f64:$vd), (VFNMADdr2m v256f64:$vy, f64:$sy, v256f64:$vw, v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vfnmads_vvvv v256f64:$vy, v256f64:$vz, v256f64:$vw), (VFNMADsv v256f64:$vy, v256f64:$vz, v256f64:$vw)>;
def : Pat<(int_ve_vfnmads_vsvv f32:$sy, v256f64:$vz, v256f64:$vw), (VFNMADsr f32:$sy, v256f64:$vz, v256f64:$vw)>;
def : Pat<(int_ve_vfnmads_vvsv v256f64:$vy, f32:$sy, v256f64:$vw), (VFNMADsr2 v256f64:$vy, f32:$sy, v256f64:$vw)>;
def : Pat<(VEvfnmads v256f64:$vy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd), (VFNMADsvm v256f64:$vy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfnmads f32:$sy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd), (VFNMADsrm f32:$sy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfnmads v256f64:$vy, f32:$sy, v256f64:$vw, v256i1:$vm, v256f64:$vd), (VFNMADsr2m v256f64:$vy, f32:$sy, v256f64:$vw, v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_pvfnmad_vvvv v256f64:$vy, v256f64:$vz, v256f64:$vw), (VFNMADpv v256f64:$vy, v256f64:$vz, v256f64:$vw)>;
def : Pat<(int_ve_pvfnmad_vsvv i64:$sy, v256f64:$vz, v256f64:$vw), (VFNMADpr i64:$sy, v256f64:$vz, v256f64:$vw)>;
def : Pat<(int_ve_pvfnmad_vvsv v256f64:$vy, i64:$sy, v256f64:$vw), (VFNMADpr2 v256f64:$vy, i64:$sy, v256f64:$vw)>;
def : Pat<(VEpvfnmad v256f64:$vy, v256f64:$vz, v256f64:$vw, v512i1:$vm, v256f64:$vd), (VFNMADpvm v256f64:$vy, v256f64:$vz, v256f64:$vw, v512i1:$vm, v256f64:$vd)>;
def : Pat<(VEpvfnmad i64:$sy, v256f64:$vz, v256f64:$vw, v512i1:$vm, v256f64:$vd), (VFNMADprm i64:$sy, v256f64:$vz, v256f64:$vw, v512i1:$vm, v256f64:$vd)>;
def : Pat<(VEpvfnmad v256f64:$vy, i64:$sy, v256f64:$vw, v512i1:$vm, v256f64:$vd), (VFNMADpr2m v256f64:$vy, i64:$sy, v256f64:$vw, v512i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vfnmsbd_vvvv v256f64:$vy, v256f64:$vz, v256f64:$vw), (VFNMSBdv v256f64:$vy, v256f64:$vz, v256f64:$vw)>;
def : Pat<(int_ve_vfnmsbd_vsvv f64:$sy, v256f64:$vz, v256f64:$vw), (VFNMSBdr f64:$sy, v256f64:$vz, v256f64:$vw)>;
def : Pat<(int_ve_vfnmsbd_vvsv v256f64:$vy, f64:$sy, v256f64:$vw), (VFNMSBdr2 v256f64:$vy, f64:$sy, v256f64:$vw)>;
def : Pat<(VEvfnmsbd v256f64:$vy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd), (VFNMSBdvm v256f64:$vy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfnmsbd f64:$sy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd), (VFNMSBdrm f64:$sy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfnmsbd v256f64:$vy, f64:$sy, v256f64:$vw, v256i1:$vm, v256f64:$vd), (VFNMSBdr2m v256f64:$vy, f64:$sy, v256f64:$vw, v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vfnmsbs_vvvv v256f64:$vy, v256f64:$vz, v256f64:$vw), (VFNMSBsv v256f64:$vy, v256f64:$vz, v256f64:$vw)>;
def : Pat<(int_ve_vfnmsbs_vsvv f32:$sy, v256f64:$vz, v256f64:$vw), (VFNMSBsr f32:$sy, v256f64:$vz, v256f64:$vw)>;
def : Pat<(int_ve_vfnmsbs_vvsv v256f64:$vy, f32:$sy, v256f64:$vw), (VFNMSBsr2 v256f64:$vy, f32:$sy, v256f64:$vw)>;
def : Pat<(VEvfnmsbs v256f64:$vy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd), (VFNMSBsvm v256f64:$vy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfnmsbs f32:$sy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd), (VFNMSBsrm f32:$sy, v256f64:$vz, v256f64:$vw, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfnmsbs v256f64:$vy, f32:$sy, v256f64:$vw, v256i1:$vm, v256f64:$vd), (VFNMSBsr2m v256f64:$vy, f32:$sy, v256f64:$vw, v256i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_pvfnmsb_vvvv v256f64:$vy, v256f64:$vz, v256f64:$vw), (VFNMSBpv v256f64:$vy, v256f64:$vz, v256f64:$vw)>;
def : Pat<(int_ve_pvfnmsb_vsvv i64:$sy, v256f64:$vz, v256f64:$vw), (VFNMSBpr i64:$sy, v256f64:$vz, v256f64:$vw)>;
def : Pat<(int_ve_pvfnmsb_vvsv v256f64:$vy, i64:$sy, v256f64:$vw), (VFNMSBpr2 v256f64:$vy, i64:$sy, v256f64:$vw)>;
def : Pat<(VEpvfnmsb v256f64:$vy, v256f64:$vz, v256f64:$vw, v512i1:$vm, v256f64:$vd), (VFNMSBpvm v256f64:$vy, v256f64:$vz, v256f64:$vw, v512i1:$vm, v256f64:$vd)>;
def : Pat<(VEpvfnmsb i64:$sy, v256f64:$vz, v256f64:$vw, v512i1:$vm, v256f64:$vd), (VFNMSBprm i64:$sy, v256f64:$vz, v256f64:$vw, v512i1:$vm, v256f64:$vd)>;
def : Pat<(VEpvfnmsb v256f64:$vy, i64:$sy, v256f64:$vw, v512i1:$vm, v256f64:$vd), (VFNMSBpr2m v256f64:$vy, i64:$sy, v256f64:$vw, v512i1:$vm, v256f64:$vd)>;
def : Pat<(int_ve_vrcpd_vv v256f64:$vy), (VRCPdv v256f64:$vy)>;
def : Pat<(int_ve_vrcps_vv v256f64:$vy), (VRCPsv v256f64:$vy)>;
def : Pat<(int_ve_pvrcp_vv v256f64:$vy), (VRCPpv v256f64:$vy)>;
def : Pat<(int_ve_vrsqrtd_vv v256f64:$vy), (VRSQRTdv v256f64:$vy)>;
def : Pat<(int_ve_vrsqrts_vv v256f64:$vy), (VRSQRTsv v256f64:$vy)>;
def : Pat<(int_ve_pvrsqrt_vv v256f64:$vy), (VRSQRTpv v256f64:$vy)>;
def : Pat<(int_ve_vcvtdw_vv v256f64:$vy), (VFLTdv v256f64:$vy)>;
def : Pat<(int_ve_vcvtsw_vv v256f64:$vy), (VFLTsv v256f64:$vy)>;
def : Pat<(int_ve_pvcvtsw_vv v256f64:$vy), (VFLTpv v256f64:$vy)>;
def : Pat<(int_ve_vcvtdl_vv v256f64:$vy), (VFLTXv v256f64:$vy)>;
def : Pat<(int_ve_vcvtds_vv v256f64:$vy), (VCVDv v256f64:$vy)>;
def : Pat<(int_ve_vcvtsd_vv v256f64:$vy), (VCVSv v256f64:$vy)>;
def : Pat<(VEvmrg v256f64:$vy, v256f64:$vz, v256i1:$vm), (VMRGvm v256f64:$vy, v256f64:$vz, v256i1:$vm)>;
def : Pat<(VEvmrgw v256f64:$vy, v256f64:$vz, v512i1:$vm), (VMRGpvm v256f64:$vy, v256f64:$vz, v512i1:$vm)>;
def : Pat<(int_ve_vshf_vvvs v256f64:$vy, v256f64:$vz, i64:$sy), (VSHFr v256f64:$vy, v256f64:$vz, i64:$sy)>;
def : Pat<(int_ve_vshf_vvvs v256f64:$vy, v256f64:$vz, (i64 uimm6:$N)), (VSHFi v256f64:$vy, v256f64:$vz, (i64 uimm6:$N))>;
def : Pat<(VEvcp v256f64:$vz, v256i1:$vm, v256f64:$vd), (VCPvm v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvex v256f64:$vz, v256i1:$vm, v256f64:$vd), (VEXvm v256f64:$vz, v256i1:$vm, v256f64:$vd)>;
def : Pat<(VEvfmkl (i32 uimm6:$cc), v256f64:$vz), (VFMKv (i32 uimm6:$cc), v256f64:$vz)>;
def : Pat<(VEvfmklm (i32 uimm6:$cc), v256f64:$vz, v256i1:$vm), (VFMKvm (i32 uimm6:$cc), v256f64:$vz, v256i1:$vm)>;
def : Pat<(VEvfmkat), (VFMKat)>;
def : Pat<(VEvfmkaf), (VFMKaf)>;
def : Pat<(VEpvfmkat), (VFMKpat)>;
def : Pat<(VEpvfmkaf), (VFMKpaf)>;
def : Pat<(VEvfmkw (i32 uimm6:$cc), v256f64:$vz), (VFMSv (i32 uimm6:$cc), v256f64:$vz)>;
def : Pat<(VEvfmkwm (i32 uimm6:$cc), v256f64:$vz, v256i1:$vm), (VFMSvm (i32 uimm6:$cc), v256f64:$vz, v256i1:$vm)>;
def : Pat<(VEpvfmkw (i32 uimm6:$cc), v256f64:$vz), (VFMSpv (i32 uimm6:$cc), v256f64:$vz)>;
def : Pat<(VEpvfmkwm (i32 uimm6:$cc), v256f64:$vz, v512i1:$vm), (VFMSpvm (i32 uimm6:$cc), v256f64:$vz, v512i1:$vm)>;
def : Pat<(VEvfmkd (i32 uimm6:$cc), v256f64:$vz), (VFMFdv (i32 uimm6:$cc), v256f64:$vz)>;
def : Pat<(VEvfmkdm (i32 uimm6:$cc), v256f64:$vz, v256i1:$vm), (VFMFdvm (i32 uimm6:$cc), v256f64:$vz, v256i1:$vm)>;
def : Pat<(VEvfmks (i32 uimm6:$cc), v256f64:$vz), (VFMFsv (i32 uimm6:$cc), v256f64:$vz)>;
def : Pat<(VEvfmksm (i32 uimm6:$cc), v256f64:$vz, v256i1:$vm), (VFMFsvm (i32 uimm6:$cc), v256f64:$vz, v256i1:$vm)>;
def : Pat<(VEpvfmks (i32 uimm6:$cc), v256f64:$vz), (VFMFpv (i32 uimm6:$cc), v256f64:$vz)>;
def : Pat<(VEpvfmksm (i32 uimm6:$cc), v256f64:$vz, v512i1:$vm), (VFMFpvm (i32 uimm6:$cc), v256f64:$vz, v512i1:$vm)>;
def : Pat<(int_ve_vsumwsx_vv v256f64:$vy), (VSUMSsxv v256f64:$vy)>;
def : Pat<(int_ve_vsumwzx_vv v256f64:$vy), (VSUMSzxv v256f64:$vy)>;
def : Pat<(int_ve_vsuml_vv v256f64:$vy), (VSUMXv v256f64:$vy)>;
def : Pat<(int_ve_vfsumd_vv v256f64:$vy), (VFSUMdv v256f64:$vy)>;
def : Pat<(int_ve_vfsums_vv v256f64:$vy), (VFSUMsv v256f64:$vy)>;
def : Pat<(int_ve_vrmaxswfstsx_vv v256f64:$vy), (VMAXSafsxv v256f64:$vy)>;
def : Pat<(int_ve_vrmaxswlstsx_vv v256f64:$vy), (VMAXSalsxv v256f64:$vy)>;
def : Pat<(int_ve_vrmaxswfstzx_vv v256f64:$vy), (VMAXSafzxv v256f64:$vy)>;
def : Pat<(int_ve_vrmaxswlstzx_vv v256f64:$vy), (VMAXSalzxv v256f64:$vy)>;
def : Pat<(int_ve_vrminswfstsx_vv v256f64:$vy), (VMAXSifsxv v256f64:$vy)>;
def : Pat<(int_ve_vrminswlstsx_vv v256f64:$vy), (VMAXSilsxv v256f64:$vy)>;
def : Pat<(int_ve_vrminswfstzx_vv v256f64:$vy), (VMAXSifzxv v256f64:$vy)>;
def : Pat<(int_ve_vrminswlstzx_vv v256f64:$vy), (VMAXSilzxv v256f64:$vy)>;
def : Pat<(int_ve_vrmaxslfst_vv v256f64:$vy), (VMAXXafv v256f64:$vy)>;
def : Pat<(int_ve_vrmaxsllst_vv v256f64:$vy), (VMAXXalv v256f64:$vy)>;
def : Pat<(int_ve_vrminslfst_vv v256f64:$vy), (VMAXXifv v256f64:$vy)>;
def : Pat<(int_ve_vrminsllst_vv v256f64:$vy), (VMAXXilv v256f64:$vy)>;
def : Pat<(int_ve_vfrmaxdfst_vv v256f64:$vy), (VFMAXadfv v256f64:$vy)>;
def : Pat<(int_ve_vfrmaxdlst_vv v256f64:$vy), (VFMAXadlv v256f64:$vy)>;
def : Pat<(int_ve_vfrmaxsfst_vv v256f64:$vy), (VFMAXasfv v256f64:$vy)>;
def : Pat<(int_ve_vfrmaxslst_vv v256f64:$vy), (VFMAXaslv v256f64:$vy)>;
def : Pat<(int_ve_vfrmindfst_vv v256f64:$vy), (VFMAXidfv v256f64:$vy)>;
def : Pat<(int_ve_vfrmindlst_vv v256f64:$vy), (VFMAXidlv v256f64:$vy)>;
def : Pat<(int_ve_vfrminsfst_vv v256f64:$vy), (VFMAXisfv v256f64:$vy)>;
def : Pat<(int_ve_vfrminslst_vv v256f64:$vy), (VFMAXislv v256f64:$vy)>;
def : Pat<(INT_VGT v256f64:$vy, VLS:$vl), (VGTv v256f64:$vy, $vl)>;
def : Pat<(INT_VGT_M v256f64:$vy, v256i1:$vm, VLS:$vl), (VGTvm v256f64:$vy, v256i1:$vm, $vl)>;
def : Pat<(INT_VGTU v256f64:$vy, VLS:$vl), (VGTUv v256f64:$vy, $vl)>;
def : Pat<(INT_VGTU_M v256f64:$vy, v256i1:$vm, VLS:$vl), (VGTUvm v256f64:$vy, v256i1:$vm, $vl)>;
def : Pat<(INT_VGTLSX v256f64:$vy, VLS:$vl), (VGTLsxv v256f64:$vy, $vl)>;
def : Pat<(INT_VGTLSX_M v256f64:$vy, v256i1:$vm, VLS:$vl), (VGTLsxvm v256f64:$vy, v256i1:$vm, $vl)>;
def : Pat<(INT_VGTLZX v256f64:$vy, VLS:$vl), (VGTLzxv v256f64:$vy, $vl)>;
def : Pat<(INT_VGTLZX_M v256f64:$vy, v256i1:$vm, VLS:$vl), (VGTLzxvm v256f64:$vy, v256i1:$vm, $vl)>;
def : Pat<(INT_VSC v256f64:$vx, v256f64:$vy, VLS:$vl), (VSCv v256f64:$vx, v256f64:$vy, $vl)>;
def : Pat<(INT_VSC_M v256f64:$vx, v256f64:$vy, v256i1:$vm, VLS:$vl), (VSCvm v256f64:$vx, v256f64:$vy, v256i1:$vm, $vl)>;
def : Pat<(INT_VSCU v256f64:$vx, v256f64:$vy, VLS:$vl), (VSCUv v256f64:$vx, v256f64:$vy, $vl)>;
def : Pat<(INT_VSCU_M v256f64:$vx, v256f64:$vy, v256i1:$vm, VLS:$vl), (VSCUvm v256f64:$vx, v256f64:$vy, v256i1:$vm, $vl)>;
def : Pat<(INT_VSCL v256f64:$vx, v256f64:$vy, VLS:$vl), (VSCLv v256f64:$vx, v256f64:$vy, $vl)>;
def : Pat<(INT_VSCL_M v256f64:$vx, v256f64:$vy, v256i1:$vm, VLS:$vl), (VSCLvm v256f64:$vx, v256f64:$vy, v256i1:$vm, $vl)>;
def : Pat<(VEandm v256i1:$vmy, v256i1:$vmz), (ANDM v256i1:$vmy, v256i1:$vmz)>;
def : Pat<(VEandm v512i1:$vmy, v512i1:$vmz), (ANDMp v512i1:$vmy, v512i1:$vmz)>;
def : Pat<(VEorm v256i1:$vmy, v256i1:$vmz), (ORM v256i1:$vmy, v256i1:$vmz)>;
def : Pat<(VEorm v512i1:$vmy, v512i1:$vmz), (ORMp v512i1:$vmy, v512i1:$vmz)>;
def : Pat<(VExorm v256i1:$vmy, v256i1:$vmz), (XORM v256i1:$vmy, v256i1:$vmz)>;
def : Pat<(VExorm v512i1:$vmy, v512i1:$vmz), (XORMp v512i1:$vmy, v512i1:$vmz)>;
def : Pat<(VEeqvm v256i1:$vmy, v256i1:$vmz), (EQVM v256i1:$vmy, v256i1:$vmz)>;
def : Pat<(VEeqvm v512i1:$vmy, v512i1:$vmz), (EQVMp v512i1:$vmy, v512i1:$vmz)>;
def : Pat<(VEnndm v256i1:$vmy, v256i1:$vmz), (NNDM v256i1:$vmy, v256i1:$vmz)>;
def : Pat<(VEnndm v512i1:$vmy, v512i1:$vmz), (NNDMp v512i1:$vmy, v512i1:$vmz)>;
def : Pat<(VEnegm v256i1:$vmy), (NEGM v256i1:$vmy)>;
def : Pat<(VEnegm v512i1:$vmy), (NEGMp v512i1:$vmy)>;
def : Pat<(INT_PCVM v256i1:$vmy, VLS:$vl), (PCVM v256i1:$vmy, $vl)>;
def : Pat<(INT_LZVM v256i1:$vmy, VLS:$vl), (LZVM v256i1:$vmy, $vl)>;
def : Pat<(INT_TOVM v256i1:$vmy, VLS:$vl), (TOVM v256i1:$vmy, $vl)>;

// Pattern Matchings for Vector Intrinsics

def : Pat<(VElvl i32:$sy), (LVL i32:$sy)>;

def : Pat<(i64 (int_ve_pack_f32p ADDRri:$addr0, ADDRri:$addr1)),
          (ORrr (INSERT_SUBREG (i64 (IMPLICIT_DEF)),
                               (LDUri MEMri:$addr0), sub_f32),
                (INSERT_SUBREG (i64 (IMPLICIT_DEF)),
                               (LDLUri MEMri:$addr1), sub_i32))>;

def : Pat<(i64 (int_ve_pack_f32a ADDRri:$addr)),
          (i64 (MPYrr
            (INSERT_SUBREG (i64 (IMPLICIT_DEF)), (LDLUri MEMri:$addr), sub_i32),
            (LEASLrzi (ANDrm0 (LEAzzi (LO32 (i64 0x0000000100000001))), 32),
                      (HI32 (i64 0x0000000100000001)))))>;

def : Pat<(v256i1 (VEextmu v512i1:$vm)),
          (v256i1 (EXTRACT_SUBREG v512i1:$vm, sub_vm_odd))>;

def : Pat<(v256i1 (VEextml v512i1:$vm)),
          (v256i1 (EXTRACT_SUBREG v512i1:$vm, sub_vm_even))>;

def : Pat<(v512i1 (VEinsmu v512i1:$vmx, v256i1:$vmy)),
          (v512i1 (INSERT_SUBREG v512i1:$vmx, v256i1:$vmy, sub_vm_odd))>;

def : Pat<(v512i1 (VEinsml v512i1:$vmx, v256i1:$vmy)),
          (v512i1 (INSERT_SUBREG v512i1:$vmx, v256i1:$vmy, sub_vm_even))>;
